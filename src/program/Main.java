/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package program;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import entity.*;
import java.util.Optional;

import java.io.*;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;


import javazoom.jl.decoder.JavaLayerException;
import javazoom.jl.player.*;

/**
 *
 * @author Andrew
 */
public class Main extends javax.swing.JFrame {
    private static DAO appointmentDAO;
    private static DAO customersDAO;
    private static DAO barberDAO;
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        btnDeleteAppt = new javax.swing.JButton();
        txtAppointmentID = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtApptCustomerID = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAppointment = new javax.swing.JTable();
        btnInsertAppt = new javax.swing.JButton();
        btnUpdateAppt = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        txtApptDateTime = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtApptBarberID = new javax.swing.JTextField();
        btnRefreshAppt = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnDeleteCust = new javax.swing.JButton();
        txtCustomerID = new javax.swing.JTextField();
        txtPhoneNum = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtCustFName = new javax.swing.JTextField();
        txtCustLName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCustomers = new javax.swing.JTable();
        btnInsertCust = new javax.swing.JButton();
        btnUpdateCust = new javax.swing.JButton();
        btnRefreshCust = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        txtBarberID = new javax.swing.JTextField();
        btnUpdateBarber = new javax.swing.JButton();
        txtBarberSSN = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtBarberFName = new javax.swing.JTextField();
        txtBarberLName = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblBarber = new javax.swing.JTable();
        btnDeleteBarber = new javax.swing.JButton();
        btnInsertBarber = new javax.swing.JButton();
        btnRefreshBarb = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Barber GUI");

        btnDeleteAppt.setText("Delete");
        btnDeleteAppt.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnDeleteAppt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteApptActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel5.setText("Appointment ID");

        jLabel7.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel7.setText("Customer ID");

        txtApptCustomerID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtApptCustomerIDActionPerformed(evt);
            }
        });

        tblAppointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Appointment ID", "Customer ID", "Barber ID", "Date & Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAppointment.setCellSelectionEnabled(true);
        tblAppointment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAppointmentMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblAppointment);
        tblAppointment.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        btnInsertAppt.setText("Save");
        btnInsertAppt.setActionCommand("Insert");
        btnInsertAppt.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnInsertAppt.setIconTextGap(0);
        btnInsertAppt.setInheritsPopupMenu(true);
        btnInsertAppt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertApptActionPerformed(evt);
            }
        });

        btnUpdateAppt.setText("Update");
        btnUpdateAppt.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnUpdateAppt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateApptActionPerformed(evt);
            }
        });

        jLabel10.setText("( YYYY-MM-DD HH:MM:SS )");

        jLabel12.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel12.setText("Date & Time");
        jLabel12.setToolTipText("");
        jLabel12.setMaximumSize(new java.awt.Dimension(65, 16));
        jLabel12.setMinimumSize(new java.awt.Dimension(65, 16));

        jLabel15.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel15.setText("Barber ID");

        btnRefreshAppt.setText("Refresh");
        btnRefreshAppt.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnRefreshAppt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshApptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtAppointmentID)
                            .addComponent(txtApptCustomerID, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtApptBarberID, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE))
                            .addComponent(txtApptDateTime, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(8, 8, 8))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnInsertAppt, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpdateAppt, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteAppt, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRefreshAppt, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAppointmentID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtApptCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtApptBarberID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtApptDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addGap(44, 44, 44)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdateAppt, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDeleteAppt, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnInsertAppt, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRefreshAppt, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Appointment", jPanel2);

        btnDeleteCust.setText("Delete");
        btnDeleteCust.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnDeleteCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCustActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel1.setText("Customer ID");

        jLabel4.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel4.setText("Phone Number");
        jLabel4.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel2.setText("First Name");

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel3.setText("Last Name");
        jLabel3.setToolTipText("");

        tblCustomers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "First Name", "Last Name", "Phone Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCustomers.setCellSelectionEnabled(true);
        tblCustomers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCustomersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCustomers);
        tblCustomers.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        btnInsertCust.setText("Save");
        btnInsertCust.setActionCommand("Insert");
        btnInsertCust.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnInsertCust.setIconTextGap(0);
        btnInsertCust.setInheritsPopupMenu(true);
        btnInsertCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertCustActionPerformed(evt);
            }
        });

        btnUpdateCust.setText("Update");
        btnUpdateCust.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnUpdateCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCustActionPerformed(evt);
            }
        });

        btnRefreshCust.setText("Refresh");
        btnRefreshCust.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnRefreshCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshCustActionPerformed(evt);
            }
        });

        jLabel9.setText("(NNN-NNN-NNNN)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnInsertCust, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpdateCust, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteCust, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRefreshCust, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtPhoneNum)
                                .addComponent(txtCustLName)
                                .addComponent(txtCustFName)
                                .addComponent(txtCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(19, 19, 19)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCustFName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCustLName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPhoneNum, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdateCust, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDeleteCust, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnInsertCust, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRefreshCust, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Customer", jPanel1);

        btnUpdateBarber.setText("Update");
        btnUpdateBarber.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnUpdateBarber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateBarberActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel8.setText("Barber ID");

        jLabel11.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel11.setText("SSN");
        jLabel11.setToolTipText("");

        jLabel13.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel13.setText("First Name");

        jLabel14.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel14.setText("Last Name");
        jLabel14.setToolTipText("");

        tblBarber.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Barber ID", "First Name", "Last Name", "SSN"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBarber.setCellSelectionEnabled(true);
        tblBarber.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBarberMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblBarber);
        tblBarber.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        btnDeleteBarber.setText("Delete");
        btnDeleteBarber.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnDeleteBarber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteBarberActionPerformed(evt);
            }
        });

        btnInsertBarber.setText("Save");
        btnInsertBarber.setActionCommand("Insert");
        btnInsertBarber.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnInsertBarber.setIconTextGap(0);
        btnInsertBarber.setInheritsPopupMenu(true);
        btnInsertBarber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertBarberActionPerformed(evt);
            }
        });

        btnRefreshBarb.setText("Refresh");
        btnRefreshBarb.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnRefreshBarb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshBarbActionPerformed(evt);
            }
        });

        jLabel6.setText("(NNN-NN-NNNN)");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnInsertBarber, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpdateBarber, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteBarber, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRefreshBarb, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(85, 85, 85))
                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtBarberSSN)
                            .addComponent(txtBarberLName)
                            .addComponent(txtBarberFName)
                            .addComponent(txtBarberID, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(19, 19, 19)))
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBarberID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBarberFName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBarberLName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBarberSSN, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdateBarber, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDeleteBarber, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnInsertBarber, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRefreshBarb, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Barber", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Deletes a passenger using delete button
    private void btnDeleteCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCustActionPerformed
        if (!txtCustomerID.getText().isEmpty()) {
            int ID = Integer.parseInt(txtCustomerID.getText().trim());
            String fName = txtCustFName.getText().trim();
            String lName = txtCustLName.getText().trim();
            String phoneNum = txtPhoneNum.getText().trim();
            Customers customer = getCustomer(ID);
            if(customer.getcustomerID() != -1) {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
                if(option == 0) {
                    deleteCustomer(ID, fName, lName, phoneNum);
                    refreshCustomersTable();
                    clearCustTextFields();
                    play("C:\\Users\\Andrew\\Documents\\School\\PSU\\cmps221\\SCJ.mp3");
                }
            }
            else
            {
                alert("Customer does not exist", "Delete error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Delete error");
        }
    }//GEN-LAST:event_btnDeleteCustActionPerformed

    // Populates text feilds of passenger table row  if anything in row is mouse clicked
    private void tblCustomersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCustomersMouseClicked
        int i = tblCustomers.getSelectedRow();
        TableModel model = tblCustomers.getModel();
        txtCustomerID.setText(model.getValueAt(i, 0).toString());
        txtCustFName.setText(model.getValueAt(i, 1).toString());
        txtCustLName.setText(model.getValueAt(i, 2).toString());
        txtPhoneNum.setText(model.getValueAt(i, 3).toString());
    }//GEN-LAST:event_tblCustomersMouseClicked

    // Inserts new passenger using save button
    private void btnInsertCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertCustActionPerformed
        if (!txtCustomerID.getText().isEmpty()) {
            int ID = Integer.parseInt(txtCustomerID.getText().trim());
            String fName = txtCustFName.getText().trim();
            String lName = txtCustLName.getText().trim();
            String phoneNum = txtPhoneNum.getText().trim();
            if(phoneNum.matches("\\d{3}-\\d{3}-\\d{4}"))
            {
                addCustomer(ID, fName, lName, phoneNum);
                refreshCustomersTable();
                clearCustTextFields();
                play("C:\\Users\\Andrew\\Documents\\School\\PSU\\cmps221\\SCJ.mp3");
            }
            else
            {
                alert("Phone Number format is incorrect", "Incorrect Format");
            }
        }
        else
        {
            alert("ID cannot be empty", "Insert error");
        }
    }//GEN-LAST:event_btnInsertCustActionPerformed

    // Updates passenger using update button
    private void btnUpdateCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCustActionPerformed
        if (!txtCustomerID.getText().isEmpty()) {
            int ID = Integer.parseInt(txtCustomerID.getText().trim());
            String fName = txtCustFName.getText().trim();
            String lName = txtCustLName.getText().trim();
            String phoneNum = txtPhoneNum.getText().trim();
            Customers customer = getCustomer(ID);
            if(customer.getcustomerID() != -1) {
                if(phoneNum.matches("\\d{3}-\\d{3}-\\d{4}"))
                {
                    updateCustomer(ID, fName, lName, phoneNum);
                    refreshCustomersTable();
                    play("C:\\Users\\Andrew\\Documents\\School\\PSU\\cmps221\\SCJ.mp3");
                }
                else
                {
                    alert("Phone Number format is incorrect", "Incorrect Format");
                }
            }
            else
            {
                alert("Customer does not exist", "Update error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Update error");
        }
    }//GEN-LAST:event_btnUpdateCustActionPerformed

    // Deletes check in location using delete button
    private void btnDeleteApptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteApptActionPerformed
        if (!txtAppointmentID.getText().isEmpty()) {
            int ID = Integer.parseInt(txtAppointmentID.getText().trim());
            int customerID = Integer.parseInt(txtApptCustomerID.getText().trim());
            int barberID = Integer.parseInt(txtApptBarberID.getText().trim());
            String dateTime = txtApptDateTime.getText().trim();
            Appointment appointment = getAppointment(ID);
            if(appointment.getappointmentID() != -1) {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
                if(option == 0) {
                    deleteAppointment(ID, customerID, barberID, dateTime);
                    refreshAppointmentTable();
                    clearAppointmentTextFields();
                    play("C:\\Users\\Andrew\\Documents\\School\\PSU\\cmps221\\SCJ.mp3");
                }
            }
            else
            {
                alert("Appointment does not exist", "Delete error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Delete error");
        }        
    }//GEN-LAST:event_btnDeleteApptActionPerformed

    // Populates text fields of check in location table row when anything in the row is mouse clicked
    private void tblAppointmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAppointmentMouseClicked
        int i = tblAppointment.getSelectedRow();
        TableModel model = tblAppointment.getModel();
        txtAppointmentID.setText(model.getValueAt(i, 0).toString());
        txtApptCustomerID.setText(model.getValueAt(i, 1).toString());
        txtApptBarberID.setText(model.getValueAt(i, 2).toString());
        txtApptDateTime.setText(model.getValueAt(i, 3).toString());
    }//GEN-LAST:event_tblAppointmentMouseClicked

    // Creates new check in location using save button
    private void btnInsertApptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertApptActionPerformed
        if (!txtAppointmentID.getText().isEmpty()) {
            int ID = Integer.parseInt(txtAppointmentID.getText().trim());
            int customerID = Integer.parseInt(txtApptCustomerID.getText().trim());
            int barberID = Integer.parseInt(txtApptBarberID.getText().trim());
            String dateTime = txtApptDateTime.getText().trim();
            if(dateTime.matches("\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}.\\d{1}"))
            {
                addAppointment(ID, customerID, barberID, dateTime);
                refreshAppointmentTable();
                clearAppointmentTextFields();
                play("C:\\Users\\Andrew\\Documents\\School\\PSU\\cmps221\\SCJ.mp3");
            }
            else
            {
                alert("Date & Time format is incorrect.", "Incorrect Format");
            }
        }
        else
        {
            alert("ID cannot be empty", "Insert error");
        }
    }//GEN-LAST:event_btnInsertApptActionPerformed

    // Updates a check in location using update button
    private void btnUpdateApptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateApptActionPerformed
        if (!txtAppointmentID.getText().isEmpty()) {
            int ID = Integer.parseInt(txtAppointmentID.getText().trim());
            int customerID = Integer.parseInt(txtApptCustomerID.getText().trim());
            int barberID = Integer.parseInt(txtApptBarberID.getText().trim());
            String dateTime = txtApptDateTime.getText().trim();
            Appointment appointment = getAppointment(ID);
            if(appointment.getappointmentID() != -1) {
                if(dateTime.matches("\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}.\\d{1}"))
                {
                updateAppointment(ID, customerID, barberID, dateTime);
                refreshAppointmentTable();
                play("C:\\Users\\Andrew\\Documents\\School\\PSU\\cmps221\\SCJ.mp3");
                }
                else
                {
                    alert("Date & Time format is incorrect.", "Incorrect Format");
                }
            }
            else
            {
                alert("Appointment does not exist", "Update error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Update error");
        }
    }//GEN-LAST:event_btnUpdateApptActionPerformed

    private void btnUpdateBarberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateBarberActionPerformed
        if (!txtBarberID.getText().isEmpty()) {
            int ID = Integer.parseInt(txtBarberID.getText().trim());
            String fName = txtBarberFName.getText().trim();
            String lName = txtBarberLName.getText().trim();
            String ssn = txtBarberSSN.getText().trim();
            Barber barber = getBarber(ID);
            if(barber.getbarberID() != -1) {
                if(ssn.matches("\\d{3}-\\d{2}-\\d{4}"))
                {
                    updateBarber(ID, fName, lName, ssn);
                    refreshBarberTable();
                    play("C:\\Users\\Andrew\\Documents\\School\\PSU\\cmps221\\SCJ.mp3");
                }
                else
                {
                    alert("SSN format is incorrect", "Incorrect Format");
                }
            }
            else
            {
                alert("Barber does not exist", "Update error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Update error");
        }
    }//GEN-LAST:event_btnUpdateBarberActionPerformed

    private void tblBarberMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBarberMouseClicked
        int i = tblBarber.getSelectedRow();
        TableModel model = tblBarber.getModel();
        txtBarberID.setText(model.getValueAt(i, 0).toString());
        txtBarberFName.setText(model.getValueAt(i, 1).toString());
        txtBarberLName.setText(model.getValueAt(i, 2).toString());
        txtBarberSSN.setText(model.getValueAt(i, 3).toString());
    }//GEN-LAST:event_tblBarberMouseClicked

    private void btnDeleteBarberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteBarberActionPerformed
        if (!txtBarberID.getText().isEmpty()) {
            int ID = Integer.parseInt(txtBarberID.getText().trim());
            String fName = txtBarberFName.getText().trim();
            String lName = txtBarberLName.getText().trim();
            String ssn = txtBarberSSN.getText().trim();
            Barber barber = getBarber(ID);
            if(barber.getbarberID() != -1) {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
                if(option == 0) {
                    deleteBarber(ID, fName, lName, ssn);
                    refreshBarberTable();
                    clearBarberTextFields();
                    play("C:\\Users\\Andrew\\Documents\\School\\PSU\\cmps221\\SCJ.mp3");
                }
            }
            else
            {
                alert("Barber does not exist", "Delete error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Delete error");
        }
    }//GEN-LAST:event_btnDeleteBarberActionPerformed

    private void btnInsertBarberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertBarberActionPerformed
        if (!txtBarberID.getText().isEmpty()) {
            int ID = Integer.parseInt(txtBarberID.getText().trim());
            String fName = txtBarberFName.getText().trim();
            String lName = txtBarberLName.getText().trim();
            String ssn = txtBarberSSN.getText().trim();
            if(ssn.matches("\\d{3}-\\d{2}-\\d{4}"))
            {
                addBarber(ID, fName, lName, ssn);
                refreshBarberTable();
                clearBarberTextFields();
                play("C:\\Users\\Andrew\\Documents\\School\\PSU\\cmps221\\SCJ.mp3");
            }
            else
            {
                alert("SSN format is incorrect", "Incorrect Format");
            }
        }
        else
        {
            alert("ID cannot be empty", "Insert error");
        }
    }//GEN-LAST:event_btnInsertBarberActionPerformed

    private void txtApptCustomerIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtApptCustomerIDActionPerformed
    
    }//GEN-LAST:event_txtApptCustomerIDActionPerformed

    private void btnRefreshApptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshApptActionPerformed
        refreshAppointmentTable();
        play("C:\\Users\\Andrew\\Documents\\School\\PSU\\cmps221\\SCJ.mp3");
    }//GEN-LAST:event_btnRefreshApptActionPerformed

    private void btnRefreshBarbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshBarbActionPerformed
        refreshBarberTable();
        play("C:\\Users\\Andrew\\Documents\\School\\PSU\\cmps221\\SCJ.mp3");
    }//GEN-LAST:event_btnRefreshBarbActionPerformed

    private void btnRefreshCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshCustActionPerformed
        refreshCustomersTable();
        play("C:\\Users\\Andrew\\Documents\\School\\PSU\\cmps221\\SCJ.mp3");
    }//GEN-LAST:event_btnRefreshCustActionPerformed

    public void alert(String msg) {
        JOptionPane.showMessageDialog(rootPane, msg);
    }

    public void alert(String msg, String title) {
        JOptionPane.showMessageDialog(rootPane, msg, title, JOptionPane.ERROR_MESSAGE);
    }    
    
    private static void addCustomer(int customerID, String customerFirstName, String customerLastName, String customerPhoneNumber) {
        Customers customer;
        customer = new Customers(customerID, customerFirstName, customerLastName, customerPhoneNumber);
        customersDAO.insert(customer);
    }
    
    private static void addAppointment(int appointmentID, int customerID, int barberID, String checkinDateTime) {
        Appointment appointment;
        appointment = new Appointment(appointmentID, customerID, barberID, checkinDateTime);
        appointmentDAO.insert(appointment);
    }
    
    private static void addBarber(int barberID, String barberFirstName, String barberLastName, String barberSSN) {
        Barber barber;
        barber = new Barber(barberID, barberFirstName, barberLastName, barberSSN);
        barberDAO.insert(barber);
    }
    
    private static void updateCustomer(int customerID, String customerFirstName, String customerLastName, String customerPhoneNumber) {
        Customers customer;
        customer = new Customers(customerID, customerFirstName, customerLastName, customerPhoneNumber);
        customersDAO.update(customer);
    }
    
    private static void updateAppointment(int appointmentID, int customerID, int barberID, String checkinDateTime) {
        Appointment appointment;
        appointment = new Appointment(appointmentID, customerID, barberID, checkinDateTime);
        appointmentDAO.update(appointment);
    }
        
    private static void updateBarber(int barberID, String barberFirstName, String barberLastName, String barberSSN) {
        Barber barber;
        barber = new Barber(barberID, barberFirstName, barberLastName, barberSSN);
        barberDAO.update(barber);
    }
    
    private static void deleteCustomer(int customerID, String customerFirstName, String customerLastName, String customerPhoneNumber) {
        Customers customer;
        customer = new Customers(customerID, customerFirstName, customerLastName, customerPhoneNumber);
        customersDAO.delete(customer);
    }
    
    private static void deleteAppointment(int appointmentID, int customerID, int barberID, String checkinDateTime) {
        Appointment appointment;
        appointment = new Appointment(appointmentID, customerID, barberID, checkinDateTime);
        appointmentDAO.delete(appointment);
    }
    
    private static void deleteBarber(int barberID, String barberFirstName, String barberLastName, String barberSSN) {
        Barber barber;
        barber = new Barber(barberID, barberFirstName, barberLastName, barberSSN);
        barberDAO.delete(barber);
    }
    
    static Customers getCustomer(int id) {
        Optional<Customers> customer = customersDAO.get(id);
        return customer.orElseGet(() -> new Customers(-1, "Non-exist", "Non-exist", "Non-exist"));
    }
    
    static Appointment getAppointment(int id) {
        Optional<Appointment> appointment = appointmentDAO.get(id);
        return appointment.orElseGet(() -> new Appointment(-1, -1, -1, "Non-exist"));
    } 
    
    static Barber getBarber(int id) {
        Optional<Barber> barber = barberDAO.get(id);
        return barber.orElseGet(() -> new Barber(-1, "Non-exist", "Non-exist", "Non-exist"));
    }    
    
    // Method to clear the text fields for customer
    private void clearCustTextFields() {
        txtCustomerID.setText("");
        txtCustFName.setText("");
        txtCustLName.setText("");
        txtPhoneNum.setText("");
    }
    
    // Method to clear the text fields appointment
    private void clearAppointmentTextFields() {
        txtAppointmentID.setText("");
        txtApptCustomerID.setText("");
        txtApptBarberID.setText("");
        txtApptDateTime.setText("");
    }
    
    // Method to clear the text fields for barber
    private void clearBarberTextFields() {
        txtBarberID.setText("");
        txtBarberFName.setText("");
        txtBarberLName.setText("");
        txtBarberSSN.setText("");
    }

    // Refreshes Customers table 
    private void refreshCustomersTable() {
        List<Customers> customers = customersDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) tblCustomers.getModel();
        //Clear all items in tblContacts
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (Customers customer : customers) {
                Object[] row = new Object[4];
                row[0] = customer.getcustomerID();
                row[1] = customer.getcustomerFirstName();
                row[2] = customer.getcustomerLastName();
                row[3] = customer.getcustomerPhoneNumber();
                model.addRow(row);
        }
    }
    
    // Refreshes Appointment table 
    private void refreshAppointmentTable() {
        List<Appointment> appointments = appointmentDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) tblAppointment.getModel();
        //Clear all items in tblContacts
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (Appointment appointment : appointments) {
                Object[] row = new Object[4];
                row[0] = appointment.getappointmentID();
                row[1] = appointment.getcustomerID();
                row[2] = appointment.getbarberID();
                row[3] = appointment.getcheckinDateTime();
                model.addRow(row);
        }
    }
    
    // Refreshes Barber Table
    private void refreshBarberTable() {
        List<Barber> barbers = barberDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) tblBarber.getModel();
        //Clear all items in tblContacts
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (Barber barber : barbers) {
                Object[] row = new Object[4];
                row[0] = barber.getbarberID();
                row[1] = barber.getbarberFirstName();
                row[2] = barber.getbarberLastName();
                row[3] = barber.getbarberSSN();
                model.addRow(row);
        }
    }
    
    
    public static void play(String musicLocation){
        try{
            File musicPath = new File(musicLocation);
            
            if(musicPath.exists()){
                FileInputStream fis = new FileInputStream(musicPath);
                BufferedInputStream bis = new BufferedInputStream(fis);
                
                try{
                    Player player = new Player(bis);
                    player.play();
                    }catch(JavaLayerException ex){}
            }
            else{
                System.out.println("File not found");
            }
        }
        catch(Exception ex){
            ex.printStackTrace();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        barberDAO = new BarberDAO();
        customersDAO = new CustomersDAO();
        appointmentDAO = new AppointmentDAO();
        
        
        //play("C:\\Users\\Andrew\\Documents\\School\\PSU\\cmps221\\SCJ.mp3");
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteAppt;
    private javax.swing.JButton btnDeleteBarber;
    private javax.swing.JButton btnDeleteCust;
    private javax.swing.JButton btnInsertAppt;
    private javax.swing.JButton btnInsertBarber;
    private javax.swing.JButton btnInsertCust;
    private javax.swing.JButton btnRefreshAppt;
    private javax.swing.JButton btnRefreshBarb;
    private javax.swing.JButton btnRefreshCust;
    private javax.swing.JButton btnUpdateAppt;
    private javax.swing.JButton btnUpdateBarber;
    private javax.swing.JButton btnUpdateCust;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tblAppointment;
    private javax.swing.JTable tblBarber;
    private javax.swing.JTable tblCustomers;
    private javax.swing.JTextField txtAppointmentID;
    private javax.swing.JTextField txtApptBarberID;
    private javax.swing.JTextField txtApptCustomerID;
    private javax.swing.JTextField txtApptDateTime;
    private javax.swing.JTextField txtBarberFName;
    private javax.swing.JTextField txtBarberID;
    private javax.swing.JTextField txtBarberLName;
    private javax.swing.JTextField txtBarberSSN;
    private javax.swing.JTextField txtCustFName;
    private javax.swing.JTextField txtCustLName;
    private javax.swing.JTextField txtCustomerID;
    private javax.swing.JTextField txtPhoneNum;
    // End of variables declaration//GEN-END:variables
}
